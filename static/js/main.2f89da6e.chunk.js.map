{"version":3,"sources":["../../src/tranlsate.types.ts","../../src/Translate/Context.ts","../../src/Translate/TranslateProvider.tsx","../../src/translate.ts","../../src/useT.tsx","components/First.js","components/Second.js","translate.js","index.js"],"names":["TranslateContext","React","TranslateProvider","children","locale","translate","value","Locale","key","params","context","useContext","Error","console","msg","reg","templateKeys","k","templateKey","Set","useT","ctx","useEffect","t","checkAllVariants","useCallback","lang","Option","Select","First","setLocale","gutter","span","placeholder","defaultValue","onChange","L","RO","RU","EN","Second","name","setName","useState","offset","e","target","hello","question","defaultTranslation","withTemplateTranslation","App","style","padding","borderRadius","border","width","margin","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f89da6e.chunk.js","sourcesContent":["export enum Locale {\n  RO = 'ro-RO',\n  EN = 'en-EN',\n  RU = 'ru-RU',\n}\n\nexport interface Translate {\n  [translationKey: string]: {\n    [lang in Locale]: string;\n  };\n}\n","import { Locale, Translate } from '../tranlsate.types';\nimport React from 'react';\n\ninterface ITranslateContext {\n  locale: Locale;\n  translate: Translate;\n}\n\nconst TranslateContext = React.createContext<ITranslateContext | undefined>(undefined);\n\nexport { ITranslateContext, TranslateContext };\n","import React from 'react';\nimport { ITranslateContext, TranslateContext } from './Context';\n\nconst TranslateProvider: React.FC<ITranslateContext> = ({ children, locale, translate }) => {\n  return <TranslateContext.Provider value={{ locale, translate }}>{children}</TranslateContext.Provider>;\n};\n\nexport { TranslateProvider };\n","import { useContext } from 'react';\nimport { TranslateContext } from './Translate/Context';\nimport { Locale, Translate } from './tranlsate.types';\n\ninterface ITranslateFunc {\n  (key: string, params?: { [key: string]: string }): string;\n}\n\nconst translate: ITranslateFunc = (key, params) => {\n  const context = useContext(TranslateContext);\n  if (context === undefined) throw new Error('useTranslateHook must be used within a TranslateProvider');\n\n  if (context.translate[key] === undefined) {\n    console.error(`[ebs-intl] Error: The key: ${key} was not found in provided translate props!`);\n    return key;\n  }\n\n  let msg = context.translate[key][context.locale];\n  const reg = /{(.*?)\\}/g;\n\n  if (msg) {\n    const templateKeys = msg.match(reg);\n\n    if (params && templateKeys) {\n      for (const k of templateKeys) {\n        const templateKey = k.slice(1, -1);\n        if (!(templateKey in params)) throw new Error(`Please provide a params for key: ${templateKey}`);\n        msg = msg.replaceAll(k, params[templateKey]);\n      }\n    } else if (params && !templateKeys) {\n      console.warn(\n        `[ebs-intl] Warn: Template {params} were provided, but the translation for - ${key} is not a template string!`,\n      );\n    } else if (!params && templateKeys) {\n      console.error(\n        `[ebs-intl] Error: The key - ${key} is a template string, please provide required placeholders! `,\n        new Set(msg.match(reg)),\n      );\n    }\n  } else {\n    console.error(`[ebs-intl] Error: The key - ${key} does not contain all translation variants!`);\n  }\n\n  return msg;\n};\n\nconst checkAllVariants = (translate: Translate) => {\n  // console.log('check that every translation has translation variant for every language.');\n  for (const k in translate) {\n    const t = translate[k];\n    for (const l in Locale) {\n      if (t[Locale[l]] === undefined) throw new Error(`Please add translation for ${l} language for key - ${k}`);\n    }\n  }\n};\n\nexport { ITranslateFunc, translate, checkAllVariants };\n","import { useCallback, useContext, useEffect } from 'react';\nimport { checkAllVariants, ITranslateFunc, translate } from './translate';\nimport { TranslateContext } from './Translate/Context';\nimport { Locale } from './tranlsate.types';\n\ninterface TranslateUtils {\n  lang: Locale;\n  t: ITranslateFunc;\n}\n\nconst useT = (): TranslateUtils => {\n  const ctx = useContext(TranslateContext);\n  if (ctx === undefined) throw new Error('useT hook must be used only within a TranslateProvider!');\n\n  useEffect(() => {\n    checkAllVariants(ctx.translate);\n  }, [ctx.translate]);\n\n  const t = useCallback<ITranslateFunc>(translate, []);\n  return { t, lang: ctx.locale };\n};\n\nexport { useT };\n","import React from 'react';\nimport { Col, Row, Select } from 'antd';\nimport { Locale as L, useT } from 'ebs-intl';\n\nconst { Option } = Select;\n\nconst First = ({ setLocale }) => {\n  const { t, lang } = useT();\n  return (\n    <Row gutter={8}>\n      <Col span={3}>\n        <Select placeholder={'Change app locale'} defaultValue={lang} onChange={(lang) => setLocale(lang)}>\n          <Option value={L.RO}>RO</Option>\n          <Option value={L.RU}>RU</Option>\n          <Option value={L.EN}>EN</Option>\n        </Select>\n      </Col>\n      <Col span={12}>\n        <strong>{t('defaultTranslation')}: </strong>\n        {t('hello')}\n      </Col>\n    </Row>\n  );\n};\n\nexport default First;\n","import React, { useState } from 'react';\nimport { Col, Input, Row } from 'antd';\nimport { useT } from 'ebs-intl';\n\nconst Second = () => {\n  const { t } = useT();\n  const [name, setName] = useState('nichitaa');\n  return (\n    <Row gutter={8}>\n      <Col offset={3} span={12}>\n        <strong>{t('withTemplateTranslation')}:</strong> {t('question', { name })}\n      </Col>\n      <Col span={9}>\n        <Input value={name} onChange={(e) => setName(e.target.value)} placeholder={'Change the template string name'} />\n      </Col>\n    </Row>\n  );\n};\n\nexport default Second;\n","import { Locale as L } from 'ebs-intl';\r\n\r\nexport const translate = {\r\n  hello: {\r\n    [L.RO]: 'Salut!',\r\n    [L.EN]: 'Hello!',\r\n    [L.RU]: 'Привет!'\r\n  },\r\n  question: {\r\n    [L.RO]: 'Salut, {name}. Cum ai dormit, {name}?',\r\n    [L.EN]: 'Hello, {name}. How did you sleep, {name}?',\r\n    [L.RU]: 'Привет, {name}. Как ты спал, {name}?'\r\n  },\r\n  defaultTranslation: {\r\n    [L.RO]: 'traducere implicită: ',\r\n    [L.EN]: 'default translation: ',\r\n    [L.RU]: 'перевод по умолчанию: '\r\n  },\r\n  withTemplateTranslation: {\r\n    [L.RO]: 'cu șabloane: ',\r\n    [L.EN]: 'with templates: ',\r\n    [L.RU]: 'с шаблонами: '\r\n  }\r\n};","import React, { useState } from 'react';\nimport { Locale as L, TranslateProvider } from 'ebs-intl';\nimport { First, Second } from './components';\nimport { translate } from './translate';\nimport { render } from 'react-dom';\nimport 'antd/dist/antd.css';\n\nconst App = () => {\n  const [locale, setLocale] = useState(L.EN);\n\n  return (\n    <div\n      style={{\n        padding: '15px',\n        borderRadius: '4px',\n        border: '1px solid rgba(0, 0, 0,  0.3)',\n        width: '50%',\n        margin: '50px auto',\n      }}\n    >\n      <TranslateProvider locale={locale} translate={translate}>\n        <First setLocale={setLocale} />\n        <Second />\n      </TranslateProvider>\n    </div>\n  );\n};\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}